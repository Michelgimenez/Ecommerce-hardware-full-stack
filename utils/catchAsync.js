// La idea de esta funcion es quitar el codigo repetitivo de cada funcion, por ejemplo al buscar productos, al buscar un producto o al crear un producto en cada funcion antes tenia un try/catch y en caso de atrapar un error enviaba el error en JSON como respuesta, pero ese codigo se repetia en todas las funciones, asi que para hacerlo mas simple en cada funcion llamo a esta funcion, enviandole la funcion, por ejemplo la async function que se encarga de buscar los documentos y darselos al usuario, esta funcion la recibo aca. Despues doy como retorno una funcion anonima que tiene acceso a req,res y a NEXT y esto se va almacenar por ejemplo en createProduct. De esa forma createProduct va a contener el retorno de esta funcion, que va a ser la funcion anonima que tiene acceso a req,res,next, y esta funcion dentro se encarga de llamar a la funcion async original que le envie a la funcion de catchAsync, y dentro a esta funcion le paso la solicitud, la respuesta y NEXT, recordando que esta funcion async da como retorno una promesa rechazada en caso de un error, lo atrapo con catch, y llamo a next enviandole el error, de esa forma al enviar el error atraves de NEXT, se saltean todos los middlewares que siguen y voy directo al middleware que cree en app.js a lo ultimo de todo que tras un error llama automaticamente a la funcion de globalErrorHandler que importe de errorController.js y que le pasa automaticamente el error y que se encarga de darle un mensaje con buen formato, etc. Es un re quilombo pero bueno jeje
module.exports = (fn) => {
  return (req, res, next) => {
    fn(req, res, next).catch((error) => next(error));
  };
};
